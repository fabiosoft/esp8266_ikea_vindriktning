# Connected it all up as listed below.
# IKEA Vindriktning	          D1 ESP MCU pin	Note
# PCB +5V pad	                5V	
# PCB GND pad	                GND	
# PCB REST pad	              D2	            UART TX from PM1006 sensor
# Fan +5V (red wire)	        3V3 (DC stepdown)   Fan will run constantly and quietly
# Fan GND (black wire)	      GND	
# Led_G pad	                  D5	            Green LED
# R3 (left side)	            D7	            Red LED
# R4 (left side)	            D6	            Orange LED
# LED_R_1 pad	                A0	            light-sensing element (not used yet)


substitutions:
  friendly_name: "Vindriktning Air Quality Sensor"
  webserver_port: "80"
  
globals:
  - id: daytime_start_hour
    type: int
    restore_value: no
    initial_value: "8"
  - id: daytime_end_hour
    type: int
    restore_value: no
    initial_value: "22"
  - id: show_good_status # if true: show only on orange and red not green
    type: bool
    restore_value: no
    initial_value: "true"
  
  
esphome:
  name: livingroom-particulate-matter
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 600 #600: This is where most sensors are set up.
    then:
      - light.turn_on:
          id: lightgreen
          brightness: 100%
      - delay: 3s
      - light.turn_off:
          id: lightgreen
      - light.turn_on:
          id: lightorange
          brightness: 100%
      - delay: 3s
      - light.turn_off:
          id: lightorange
      - light.turn_on:
          id: lightred
          brightness: 100%
      - delay: 3s
      - light.turn_off:
          id: lightred

logger:
api:
ota:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}
captive_portal:
time:
  - platform: homeassistant
    id: homeassistant_time

#web_server:
#  port: $webserver_port

# MQTT
# mqtt:
#   broker: !secret mqtt_broker
#   discovery: false
#   topic_prefix: "esphome/livingroom_particulate_matter"

uart:
  id: uart_pm1006
  tx_pin: D1
  rx_pin: D2
  baud_rate: 9600
  
light:
  - platform: monochromatic
    id: lightgreen
    name: "Led Green"
    output: ledgreen
  - platform: monochromatic
    id: lightorange
    name: "Led Orange"
    output: ledorange
  - platform: monochromatic
    id: lightred
    name: "Led Red"
    output: ledred

output:
  - platform: esp8266_pwm
    id: ledgreen
    pin:
      number: D5
      inverted: true
  - platform: esp8266_pwm
    id: ledorange
    pin:
      number: D6
      inverted: false
  - platform: esp8266_pwm
    id: ledred
    pin:
      number: D7
      inverted: true

switch:
  - platform: restart
    name: "$friendly_name Restart"

sensor:
  #- platform: adc
  #  pin: A0
  #  name: "A0"
  #  unit_of_measurement: lux
  #  update_interval: 30s
  #  filters:
  #    - lambda: |-
  #        return (x * 3.3 / 10000.0) * 2000000.0;
    
  - platform: pm1006
    uart_id: uart_pm1006
    update_interval: 1s #20s
    pm_2_5:
      id: pm1006_sensor
      name: "$friendly_name PM1006"
      accuracy_decimals: 2
      filters:
        - sliding_window_moving_average:
            window_size: 50
            send_every: 10
            send_first_at: 1
      on_value:
        lambda: !lambda |-
          auto sensor_value = id(pm1006_sensor).state; // 90
          auto ha_time = id(homeassistant_time).now();
          if (ha_time.is_valid() && (ha_time.hour < id(daytime_start_hour) && ha_time.hour > id(daytime_start_hour))){
            // NIGHT MODE - ALL OFF
            auto lightgreen_call = id(lightgreen).turn_off();
            auto lightorange_call = id(lightorange).turn_off();
            auto lightred_call = id(lightred).turn_off();
            lightgreen_call.perform();
            lightorange_call.perform();
            lightred_call.perform();
            return;
          }
          if (sensor_value >= 0 && sensor_value <= 35 && id(show_good_status)) {
            //Green ON
            auto lightgreen_call = id(lightgreen).turn_on();
            auto lightorange_call = id(lightorange).turn_off();
            auto lightred_call = id(lightred).turn_off();
            lightgreen_call.perform();
            lightorange_call.perform();
            lightred_call.perform();
          }
          if (sensor_value >= 36 && sensor_value <= 85){
            //Orange ON
            auto lightgreen_call = id(lightgreen).turn_off();
            auto lightorange_call = id(lightorange).turn_on();
            auto lightred_call = id(lightred).turn_off();
            lightgreen_call.perform();
            lightorange_call.perform();
            lightred_call.perform();
          }
          if (sensor_value >= 86){
            //Red ON
            auto lightgreen_call = id(lightgreen).turn_off();
            auto lightorange_call = id(lightorange).turn_off();
            auto lightred_call = id(lightred).turn_on();
            lightgreen_call.perform();
            lightorange_call.perform();
            lightred_call.perform();
          }

# enables the Vindriktning to be shown properly in the HA Energy Monitoring             
  - platform: template
    name: "$friendly_name - Power Usage"
    id: power_consumption
    device_class: power
    state_class: measurement
    unit_of_measurement: W
    accuracy_decimals: 2
    filters:
      - heartbeat: 60s
  - platform: integration
    name: "$friendly_name - Consumed Energy"
    sensor: power_consumption
    time_unit: 'h'
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: 'Wh'
    restore: false
    integration_method: left
    accuracy_decimals: 2

interval:
  - interval: 1min
    then:
      - sensor.template.publish:
          id: power_consumption
          state: 0.5696